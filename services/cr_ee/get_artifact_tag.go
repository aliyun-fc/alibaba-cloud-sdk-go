package cr_ee

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// GetArtifactTag invokes the cr.GetArtifactTag API synchronously
func (client *Client) GetArtifactTag(request *GetArtifactTagRequest) (response *GetArtifactTagResponse, err error) {
	response = CreateGetArtifactTagResponse()
	err = client.DoAction(request, response)
	return
}

// GetArtifactTagWithChan invokes the cr.GetArtifactTag API asynchronously
func (client *Client) GetArtifactTagWithChan(request *GetArtifactTagRequest) (<-chan *GetArtifactTagResponse, <-chan error) {
	responseChan := make(chan *GetArtifactTagResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetArtifactTag(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// GetArtifactTagWithCallback invokes the cr.GetArtifactTag API asynchronously
func (client *Client) GetArtifactTagWithCallback(request *GetArtifactTagRequest, callback func(response *GetArtifactTagResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetArtifactTagResponse
		var err error
		defer close(result)
		response, err = client.GetArtifactTag(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// GetArtifactTagRequest is the request struct for api GetArtifactTag
type GetArtifactTagRequest struct {
	*requests.RpcRequest
	RepoId     string `position:"Query" name:"RepoId"`
	InstanceId string `position:"Query" name:"InstanceId"`
	Tag        string `position:"Query" name:"Tag"`
}

// GetArtifactTagResponse is the response struct for api GetArtifactTag
type GetArtifactTagResponse struct {
	*responses.BaseResponse
	GetArtifactTagIsSuccess bool            `json:"IsSuccess" xml:"IsSuccess"`
	Code                    string          `json:"Code" xml:"Code"`
	RequestId               string          `json:"RequestId" xml:"RequestId"`
	Tag                     string          `json:"Tag" xml:"Tag"`
	Digest                  string          `json:"Digest" xml:"Digest"`
	Status                  string          `json:"Status" xml:"Status"`
	Size                    int64           `json:"Size" xml:"Size"`
	CreateTime              int64           `json:"CreateTime" xml:"CreateTime"`
	UpdateTime              int64           `json:"UpdateTime" xml:"UpdateTime"`
	Artifacts               []ArtifactsItem `json:"Artifacts" xml:"Artifacts"`
}

// CreateGetArtifactTagRequest creates a request to invoke GetArtifactTag API
func CreateGetArtifactTagRequest() (request *GetArtifactTagRequest) {
	request = &GetArtifactTagRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("cr", "2018-12-01", "GetArtifactTag", "", "")
	request.Method = requests.GET
	return
}

// CreateGetArtifactTagResponse creates a response to parse from GetArtifactTag response
func CreateGetArtifactTagResponse() (response *GetArtifactTagResponse) {
	response = &GetArtifactTagResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
